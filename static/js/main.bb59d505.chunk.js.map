{"version":3,"sources":["Components/Examples.js","Components/App.js","serviceWorker.js","index.js","Components/Code.js"],"names":["Examples","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleNavbar","bind","assertThisInitialized","state","collapsed","setState","react_default","a","createElement","Fragment","Code","title","expression","Component","App","reactstrap_es","color","light","expand","href","onClick","toggle","isOpen","navbar","className","Components_Examples","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","C_Users_imand_Desktop_js_js_coercion_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_Users_imand_Desktop_js_js_coercion_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_imand_Desktop_js_js_coercion_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","C_Users_imand_Desktop_js_js_coercion_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","collapse","handleInputChange","event","target","value","type","checked","name","key","console","log","compile","C_Users_imand_Desktop_js_js_coercion_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","replace","expr","answer","eval","e","toString","react__WEBPACK_IMPORTED_MODULE_7___default","reactstrap__WEBPACK_IMPORTED_MODULE_8__","style","marginBottom","children","for","id","onChange","onKeyPress"],"mappings":"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","file":"static/js/main.bb59d505.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Row,\r\n  Col,\r\n  Container\r\n} from \"reactstrap\";\r\nimport Code from \"./Code\";\r\n\r\nclass Examples extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar() {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Code title=\"Strings and +\" expression=\"14 + &quot;&quot;\">\r\n          Any expression that starts with a String and involves a \"+\" will result in a\r\n          String\r\n        </Code>\r\n        <Code title=\"Strings and -\" expression=\"14 - '29'\">\r\n          Any expression with a String and \"-\" will result in a Number\r\n        </Code>\r\n        <Code title=\"Strings and Arrays\" expression=\"[&quot;100&quot;] + [200]\">\r\n          Adding arrays results in concatinated String. While substracting\r\n          arrays results in a number\r\n        </Code>\r\n        <Code title=\"Booleans with ==\" expression=\"'true' == true\">\r\n          Implicit comparison will cast the objects before comparing them\r\n        </Code>\r\n        <Code title=\"Booleans with ===\" expression=\"'1' === true\">\r\n          Explicit comparision results on checking type equality first\r\n        </Code>\r\n        <Code title=\"Numbers and Strings\" expression=\"+'123' / '6'\">\r\n          A begining \"+\" will convert the expression into a number\r\n        </Code>\r\n        <Code title=\"Numbers and null\" expression=\"5 / (null)\">\r\n          null has an undefined value so it is treated as an undefined number\r\n        </Code>\r\n        <Code title=\"Numbers and undefined\" expression=\"5 / (null)\">\r\n          null has an undefined value so it is treated as an undefined number\r\n        </Code>\r\n        <Code title=\"NaN\" expression=\"let a = NaN; a == a\">\r\n          NaN is equal to nothing, including itself\r\n        </Code>\r\n        <Code title=\"The letter n\" expression=\"[[][[]]+[]][+[]][++[+[]][+[]]]\">\r\n          Here is an interesting way to get the letter n\r\n        </Code>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Examples;\r\n","import React, { Component } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Row,\n  Col,\n  Jumbotron,\n  Container\n} from \"reactstrap\";\nimport Examples from \"./Examples\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">JS Coercion</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"https://github.com/AJHenry/js-coercion\">\n                  GitHub\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Container>\n          <Jumbotron>\n            <h1 className=\"display-3\">JavaScript Coercion</h1>\n            <p className=\"lead\">\n              JavaScript can contains 5 different data types: string, number, boolean,\n              object, and function... but there are only 3 types of coercion, to number, to string, to boolean.\n            </p>\n            <hr className=\"my-2\" />\n            <p>\n              Coercion can be explicit or implicit. Implicit coercion happens when you apply operators to data types. Explicit coercion happens when you explicitly call Object constructors, like String() or Number().\n            </p>\n          </Jumbotron>\n          <Examples />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Button,\r\n  CardBody,\r\n  Card,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from \"reactstrap\";\r\nimport '../css/Code.css';\r\n\r\nclass Code extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      collapse: false,\r\n      expression: this.props.expression || null\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    if (event.key === \"Enter\") {\r\n      console.log(\"Hello\");\r\n      this.compile(value);\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value.replace(\"\\n\", \"\")\r\n    });\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({ collapse: !this.state.collapse });\r\n  }\r\n\r\n  compile(expr) {\r\n    let answer = \"\";\r\n    try {\r\n      answer = eval(expr);\r\n    } catch (e) {\r\n      answer = e;\r\n    }\r\n\r\n    if (typeof answer === \"string\") {\r\n      answer = '\"' + answer + '\"';\r\n    }\r\n\r\n    console.log(answer);\r\n\r\n    this.setState({\r\n      answer: answer.toString()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col className=\"ml-0\">\r\n            <h1>{this.props.title}</h1>\r\n          </Col>\r\n          <Col\r\n            className=\"d-flex flex-row-reverse\"\r\n            style={{ marginBottom: \"1rem\" }}\r\n          >\r\n            <Button color=\"primary\" onClick={this.toggle}>\r\n              Try It\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Collapse isOpen={this.state.collapse}>\r\n          <Row>\r\n            <Col>{this.props.children}</Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form>\r\n                <FormGroup>\r\n                  <Label for=\"exampleEmail\" />\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    name=\"expression\"\r\n                    id=\"expression\"\r\n                    onChange={this.handleInputChange}\r\n                    onKeyPress={this.handleInputChange}\r\n                    value={this.state.expression}\r\n                  />\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n            <Col className=\"d-flex align-items-center justify-content-center\">\r\n              <div >\r\n                <h1>{this.state.answer}</h1>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Collapse>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Code;\r\n"],"sourceRoot":""}